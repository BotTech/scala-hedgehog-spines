version: 2.1

references:

  # A bunch of these ideas were taken from https://github.com/circleci/frontend/blob/master/.circleci/config.yml.

  working_dir: &working_dir
    '~/scala-hedgehog-spines'

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *working_dir

  scala_version: &scala_version
    scala_version:
      description: The version of Scala.
      type: string
      default: "2.13"

  report_artifact_dir: &report_artifact_dir
    report_artifact_dir:
      description: The directory to place the reports.
      type: string
      default: reports

  # Filtering based on a tag only works if all jobs have a tag filter.
  # See https://circleci.com/docs/2.0/configuration-reference/#tags
  all_tags: &all_tags
    filters:
      tags:
        only: /.*/

  publish_tagged: &publish_tagged
    filters:
      tags:
        only: /^v.*/
      branches:
        ignore: /.*/

  publish_master: &publish_master
    filters:
      branches:
        only: master

executors:

  base:
    docker:
      - image: cimg/base:stable
    working_directory: *working_dir
    
  jdk:
    docker:
      - image: circleci/openjdk:13.0.2-jdk-buster
    working_directory: *working_dir

commands:

  setup_sbt:
    description: Setup SBT.
    parameters:
      version:
        description: The version of SBT.
        type: string
        default: "1.3.9"
    steps:
      - restore_cache:
          key: v1-sbt-installer-<< parameters.version >>-debian-{{ arch }}
      - run:
          name: Install SBT
          command: |
            if [ ! -f sbt-<< parameters.version >>.deb ]; then
              curl -L -o sbt-<< parameters.version >>.deb https://dl.bintray.com/sbt/debian/sbt-<< parameters.version >>.deb
            fi
            sudo dpkg -i sbt-<< parameters.version >>.deb
      - save_cache:
          key: v1-sbt-installer-<< parameters.version >>-debian-{{ arch }}
          paths: sbt-<< parameters.version >>.deb
      - run:
          name: Delete SBT installer
          command: rm sbt-<< parameters.version >>.deb
      - run:
          name: Determine all SBT dependencies
          command: |
            if [ ! -f target/sbt-dependencies.txt ]; then
              sbt saveAllDependencies
              cp -p target/dependencies.txt target/sbt-dependencies.txt
              next='project'
              while [ -d "${next}" ] && [ ! -z "$( find "${next}" -mindepth 1 -maxdepth 1 -name '*.sbt' -type f )" ]; do
                (
                  cd "${next}"
                  sbt saveAllDependencies
                )
                cat "${next}/target/dependencies.txt" >> target/sbt-dependencies.txt
                next="${next}/project"
              done
            fi
            echo "All SBT dependencies:"
            cat target/sbt-dependencies.txt
      - restore_cache:
          keys:
            - v1-sbt-cache-{{ arch }}-{{ checksum "target/sbt-dependencies.txt" }}
            - v1-sbt-cache-{{ arch }}

  check_dependencies:
    description: Check dependencies.
    parameters:
      <<: *scala_version
      <<: *report_artifact_dir
    steps:
      - run:
          name: Run dependency checks
          command: sbt allDependencyChecks
      - store_test_results:
          path: target/scala-<< parameters.scala_version >>
      - store_artifacts:
          path: target/scala-<< parameters.scala_version >>/dependency-check-report.html
          destination: << parameters.report_artifact_dir >>/dependency-check-report.html

  check_style:
    description: Check code style.
    parameters:
      <<: *scala_version
      <<: *report_artifact_dir
    steps:
      - run:
          name: Run style checks
          command: sbt allStyleChecks
      - store_test_results:
          path: target/scala-<< parameters.scala_version >>/scapegoat-report
      - store_artifacts:
          path: target/scala-<< parameters.scala_version >>/scapegoat-report
          destination: << parameters.report_artifact_dir >>

  run_tests:
    description: Runs tests.
    parameters:
      <<: *report_artifact_dir
      <<: *scala_version
      test:
        description: Steps to run the tests.
        type: steps
      logs_artifact_dir:
        description: The directory to place the logs.
        type: string
        default: logs
      save_coverage:
        description: Whether to save coverage reports.
        type: boolean
        default: false
    steps:
      - steps: << parameters.test >>
      - store_test_results:
          path: tests/target/test-reports
      - store_artifacts:
          path: tests/target/test-reports
          destination: << parameters.report_artifact_dir >>
      - store_artifacts:
          path: target/scala-<< parameters.scala_version >>/scoverage-report
          destination: << parameters.report_artifact_dir >>
          when: << parameters.save_coverage >>

  setup_all:
    description: Performs the setup boilerplate steps.
    steps:
      - *attach_workspace
      - checkout
      - setup_sbt

  setup_gpg:
    description: Sets up GnuPG.
    parameters:
      pgp_secret:
        description: The name of the environment variable containing the PGP secret key.
        type: env_var_name
        default: PGP_SECRET
    steps:
      - run:
          name: Show GnuPG version.
          command: gpg --version
      - run:
          name: Import PGP key.
          command: |
            export GPG_TTY="$(tty)"
            echo "${<< parameters.pgp_secret >>}" | base64 --decode | gpg --import

jobs:

  compile:
    executor: jdk
    steps:
      - setup_all
      - run:
          name: Compile SBT projects
          command: sbt compile
      - persist_to_workspace:
          root: *working_dir
          paths:
            - .

  checks:
    executor: jdk
    steps:
      - setup_all
      - check_dependencies
      - check_style
      # Save the cache here because the dependency checks stores the NVD database in a
      # data directory alongside the JAR.
      - save_cache:
          key: v1-sbt-cache-{{ arch }}-{{ checksum "target/sbt-dependencies.txt" }}
          paths:
            - "~/.ivy2/cache"
            - "~/.sbt"
            - "~/.m2"
            - "~/.coursier"
            - "~/.cache/coursier"

  unit_tests:
    executor: jdk
    steps:
      - setup_all
      - run_tests:
          test:
            - run:
                name: Run unit tests
                command: sbt coverage test coverageAggregate

  publish:
    executor: jdk
    steps:
      - setup_all
#      - setup_gpg
#      - run:
#          name: Release to Sonatype.
#          command: sbt sonatypeBundleRelease
      - run:
          name: Publish and release to Bintray.
          command: sbt publish

workflows:
  version: 2

  integration:
    jobs:
      - compile:
          <<: *all_tags
      - checks:
          <<: *all_tags
          requires:
            - compile
      - unit_tests:
          <<: *all_tags
          requires:
            - compile
      - publish:
          name: Publish tagged
          <<: *publish_tagged
          requires:
            - checks
            - unit_tests
      - publish:
          name: Publish master
          <<: *publish_master
          requires:
            - checks
            - unit_tests
